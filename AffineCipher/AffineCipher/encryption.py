#!/usr/bin/env pytho

"""
This program encrypts text which is input by the user.
The output is both in terminal as well as in a .txt file.
This program can also decrypt user input and .txt files, provided the user has the key.
The output is both in terminal as well in a .txt file.
The last functionality is clearing the files generated by this program.
"""

import os
from cryptography.fernet import Fernet

__author__ = "Marnix J.F. Lourens"
__copyright__ = "Copyright 2020, Marnix J.F. Lourens"
__credits__ = "Marnix J.F. Lourens, Raf√°el Alio"
__license__ = "GNU General Public License v3.0"
__version__ = "Final"
__maintainer__ = "Marnix J.F. Lourens"
__email__ = "marnix.lourens@hva.nl"
__status__ = "Production"

def generate_key():
    """Generates a key and saves it."""
    key = Fernet.generate_key()
    with open("secret.key", "wb") as key_doc:
        key_doc.write(key)

def load_key():
    """Loads secret.key."""
    return open("secret.key", "rb").read()

def encrypt_message(message):
    """Encrypts a plaintext."""
    key = load_key()
    f = Fernet(key)
    encoded_message = f.encrypt(message.encode()).decode()

    file = open("Encrypted_message.txt", "a")
    file.write(encoded_message + "\n")
    file.close()

    print(encoded_message)

def decrypt_message(filename="", message=""):
    """Decrypts the encrpyted message."""
    key = load_key()
    f = Fernet(key)

    result_file = open("Decrypted_message.txt", "a")

    if filename != "":
        # Open the provided file and loops through each line to decrypt.
        with open(filename, "r") as file:
            for line in file:
                stripped_line = line.strip()
                message = stripped_line

                # Decrypt the message and append it to the resultFile.
                try:
                    decrypted_message = f.decrypt(message.encode()).decode()
                    print(decrypted_message)

                    result_file.write(decrypted_message)
                except:
                    print("Error: Could not decrypt.")

    elif message != "":
        try:
            decrypted_message = f.decrypt(message.encode()).decode()
            print(decrypted_message)
        except:
            print("Error: Could not decrypt.")
    else:
        print("Error: No file or message provided.")
        return

    result_file.close()

def clear_message():
    """Clears the content of files."""
    file = open("Decrypted_message.txt", "w")
    file.write("")
    file.close()

    file = open("Encrypted_message.txt", "w")
    file.write("")
    file.close()

while True:
    try:
        if os.path.isfile("secret.key"):
            pass
        else:
            print("Generating key.")
            generate_key()
    except:
        print("Error generating key.")
        break

    MENU = input("Press E for Encrypt. Press D for Decrypt.", \
        "Press Q for Quit. Press C to clear files. ").lower()

    if MENU == "e" or MENU == "encrypt":
        PLAINTEXT = input("Enter message to encrypt: ")
        encrypt_message(PLAINTEXT)
    elif MENU == "d" or MENU == "decrypt":
        RESULT = input("Do you want to load an encrypted message from a file? Y/N: ").lower()
        if RESULT == "y" or RESULT == "yes":
            # Decrypts a given file
            FILENAME = input("Enter .txt filename: ")
            decrypt_message(filename=FILENAME)
        else:
            # Decrypts a given string
            CIPHERTEXT = input("Enter message to decrypt: ")
            decrypt_message(message=CIPHERTEXT)
    elif MENU == "c" or MENU == "clear":
        clear_message()
        print("Files cleared.")
    elif MENU == "q" or MENU == "quit":
        quit()
